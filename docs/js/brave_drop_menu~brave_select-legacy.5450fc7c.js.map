{"version":3,"sources":["webpack:///./node_modules/@floating-ui/core/dist/floating-ui.core.esm.js","webpack:///./src/directives/clickoutside.js","webpack:///./node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js"],"names":["getBasePlacement","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","reference","floating","commonX","x","width","commonY","y","height","coords","mainAxis","length","computePosition","async","config","strategy","middleware","platform","rects","getElementRects","statefulPlacement","middlewareData","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingClientRect","isElement","contextElement","getDocumentElement","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offsetParent","getOffsetParent","min","Math","max","within","min$1","value","max$1","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","isStart","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","_middlewareData$flip2","skip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","detectOverflowOptions","basePlacement","isBasePlacement","placements","overflow","overflows","overflowsData","push","every","side","_middlewareData$flip$","_middlewareData$flip3","nextIndex","index","nextPlacement","resetPlacement","_overflowsData$slice$","slice","sort","a","b","filter","reduce","acc","convertValueToCoords","multiplier","rawValue","offset","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","size","_middlewareData$size","apply","isEnd","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","priority","bind","el","binding","vnode","clickOutsideEvent","event","target","contains","context","expression","document","body","addEventListener","unbind","removeEventListener","isWindow","toString","getWindow","node","window","ownerDocument","defaultView","getComputedStyle$1","getComputedStyle","getNodeName","nodeName","toLowerCase","isHTMLElement","HTMLElement","Element","isNode","Node","isShadowRoot","OwnElement","ShadowRoot","isScrollParent","overflowX","overflowY","test","isTableElement","isContainingBlock","isFirefox","navigator","userAgent","css","transform","perspective","contain","willChange","round","getBoundingClientRect","includeScale","clientRect","scaleX","scaleY","offsetWidth","offsetHeight","documentElement","getNodeScroll","scrollLeft","pageXOffset","scrollTop","pageYOffset","getWindowScrollBarX","isScaled","getRectRelativeToOffsetParent","isOffsetParentAnElement","scroll","offsets","offsetRect","clientLeft","clientTop","getParentNode","assignedSlot","parentNode","host","getTrueOffsetParent","position","getContainingBlock","currentNode","getDimensions","getViewportRect","win","html","visualViewport","clientWidth","clientHeight","abs","innerWidth","scale","offsetLeft","offsetTop","getDocumentRect","_element$ownerDocumen","scrollWidth","scrollHeight","direction","getScrollParent","getScrollParents","list","_node$ownerDocument","scrollParent","isBody","concat","updatedList","parent","child","rootNode","getRootNode","next","getInnerBoundingClientRect","getClientRectFromClippingParent","clippingParent","getClippingParents","clippingParents","canEscapeClipping","clipperElement","mainClippingParents","firstClippingParent","clippingRect","accRect","args","_ref2","_ref3","_ref4","getClientRects","_ref5"],"mappings":"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","file":"js/brave_drop_menu~brave_select-legacy.5450fc7c.js","sourcesContent":["function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getBasePlacement(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref) {\n  let {\n    reference,\n    floating,\n    placement\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  let coords;\n\n  switch (getBasePlacement(placement)) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);\n      break;\n\n    case 'end':\n      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);\n      break;\n  }\n\n  return coords;\n}\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement({ ...rects,\n    placement\n  });\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    if (process.env.NODE_ENV !== \"production\") {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: data != null ? data : {}\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement({ ...rects,\n          placement: statefulPlacement\n        }));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nasync function detectOverflow(middlewareArguments, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingParents',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = await platform.getClippingClientRect({\n    element: (await platform.isElement(element)) ? element : element.contextElement || (await platform.getDocumentElement({\n      element: elements.floating\n    })),\n    boundary,\n    rootBoundary\n  });\n  const elementClientRect = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await platform.getOffsetParent({\n      element: elements.floating\n    }),\n    strategy\n  })); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const basePlacement = getBasePlacement(placement);\n    const axis = getMainAxisFromPlacement(basePlacement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions({\n      element\n    });\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await platform.getOffsetParent({\n      element\n    });\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects) {\n  const isStart = getAlignment(placement) === 'start';\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? isStart ? 'right' : 'left' : isStart ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst basePlacements = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + \"-start\", basePlacement + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getBasePlacement(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {\n        return {};\n      }\n\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;\n      const currentPlacement = placements[currentIndex];\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement\n        }\n      };\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip, _middlewareData$flip2;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement\n      } = middlewareArguments;\n\n      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {\n        return {};\n      }\n\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const basePlacement = getBasePlacement(placement);\n      const isBasePlacement = basePlacement === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[basePlacement]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip3;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$slice$;\n\n              const placement = (_overflowsData$slice$ = overflowsData.slice().sort((a, b) => a.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0) - b.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        return {\n          data: {\n            skip: true\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return basePlacements.some(side => overflow[side] >= 0);\n}\n\nconst hide = () => ({\n  name: 'hide',\n\n  async fn(modifierArguments) {\n    const referenceOverflow = await detectOverflow(modifierArguments, {\n      elementContext: 'reference'\n    });\n    const floatingAltOverflow = await detectOverflow(modifierArguments, {\n      altBoundary: true\n    });\n    const referenceHiddenOffsets = getSideOffsets(referenceOverflow, modifierArguments.rects.reference);\n    const escapedOffsets = getSideOffsets(floatingAltOverflow, modifierArguments.rects.floating);\n    const referenceHidden = isAnySideFullyClipped(referenceHiddenOffsets);\n    const escaped = isAnySideFullyClipped(escapedOffsets);\n    return {\n      data: {\n        referenceHidden,\n        referenceHiddenOffsets,\n        escaped,\n        escapedOffsets\n      }\n    };\n  }\n\n});\n\nfunction convertValueToCoords(_ref) {\n  let {\n    placement,\n    rects,\n    value\n  } = _ref;\n  const basePlacement = getBasePlacement(placement);\n  const multiplier = ['left', 'top'].includes(basePlacement) ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value;\n  const {\n    mainAxis,\n    crossAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    ...rawValue\n  };\n  return getMainAxisFromPlacement(basePlacement) === 'x' ? {\n    x: crossAxis,\n    y: mainAxis * multiplier\n  } : {\n    x: mainAxis * multiplier,\n    y: crossAxis\n  };\n}\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords({\n        placement,\n        rects,\n        value\n      });\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getBasePlacement(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getBasePlacement(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$size;\n\n      const {\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {\n        return {};\n      }\n\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const basePlacement = getBasePlacement(placement);\n      const isEnd = getAlignment(placement) === 'end';\n      let heightSide;\n      let widthSide;\n\n      if (basePlacement === 'top' || basePlacement === 'bottom') {\n        heightSide = basePlacement;\n        widthSide = isEnd ? 'left' : 'right';\n      } else {\n        widthSide = basePlacement;\n        heightSide = isEnd ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: true\n        }\n      };\n    }\n\n  };\n};\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$inlin, _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy,\n        middlewareData\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n\n      if ((_middlewareData$inlin = middlewareData.inline) != null && _middlewareData$inlin.skip) {\n        return {};\n      }\n\n      const fallback = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await platform.getOffsetParent({\n          element: elements.floating\n        }),\n        strategy\n      }));\n      const clientRects = Array.from((_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects({\n        element: elements.reference\n      }))) != null ? _await$platform$getCl : []);\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getBasePlacement(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftPlacement = getBasePlacement(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftPlacement ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: await platform.getElementRects({\n            reference: {\n              getBoundingClientRect\n            },\n            floating: elements.floating,\n            strategy\n          })\n        }\n      };\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n","export default {\r\n  priority: 700,\r\n  bind: function (el, binding, vnode) {\r\n    el.clickOutsideEvent = function (event) {\r\n      // here I check that click was outside the el and his children\r\n      if (!(el == event.target || el.contains(event.target))) {\r\n        // and if it did, call method provided in attribute value\r\n        vnode.context[binding.expression](event);\r\n      }\r\n    };\r\n    document.body.addEventListener('click', el.clickOutsideEvent)\r\n  },\r\n  unbind: function (el) {\r\n    document.body.removeEventListener('click', el.clickOutsideEvent)\r\n  },\r\n}\r\n\r\n\r\n\r\n// Vue.directive('click-outside', {\r\n//   priority: 700,\r\n//   bind () {\r\n   \r\n//     let self  = this\r\n//     this.event = function (event) { \r\n//     \tconsole.log('emitting event')\r\n//     \tself.vm.$emit(self.expression,event) \r\n//  \t  }\r\n//     this.el.addEventListener('click', this.stopProp)\r\n//     document.body.addEventListener('click',this.event)\r\n//   },\r\n  \r\n//   unbind() {\r\n//   \tconsole.log('unbind')\r\n//     this.el.removeEventListener('click', this.stopProp)\r\n//     document.body.removeEventListener('click',this.event)\r\n//   },\r\n//   stopProp(event) {event.stopPropagation() }\r\n// })","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\n\nfunction isWindow(value) {\n  return (value == null ? void 0 : value.toString()) === '[object Window]';\n}\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (!isWindow(node)) {\n    const ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}\n\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\nfunction getNodeName(node) {\n  return isWindow(node) ? '' : node ? (node.nodeName || '').toLowerCase() : '';\n}\n\nfunction isHTMLElement(value) {\n  return value instanceof getWindow(value).HTMLElement;\n}\nfunction isElement(value) {\n  return value instanceof getWindow(value).Element;\n}\nfunction isNode(value) {\n  return value instanceof getWindow(value).Node;\n}\nfunction isShadowRoot(node) {\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = getComputedStyle$1(element);\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  // TODO: Try and use feature detection here instead\n  const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');\n  const css = getComputedStyle$1(element); // This is non-exhaustive but covers the most common CSS properties that\n  // create a containing block.\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n  return css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].includes(css.willChange) || isFirefox && css.willChange === 'filter' || isFirefox && (css.filter ? css.filter !== 'none' : false);\n}\n\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\n\nfunction getBoundingClientRect(element, includeScale) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  const clientRect = element.getBoundingClientRect();\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  return {\n    width: clientRect.width / scaleX,\n    height: clientRect.height / scaleY,\n    top: clientRect.top / scaleY,\n    right: clientRect.right / scaleX,\n    bottom: clientRect.bottom / scaleY,\n    left: clientRect.left / scaleX,\n    x: clientRect.left / scaleX,\n    y: clientRect.top / scaleY\n  };\n}\n\nfunction getDocumentElement(node) {\n  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;\n}\n\nfunction getNodeScroll(element) {\n  if (isWindow(element)) {\n    return {\n      scrollLeft: element.pageXOffset,\n      scrollTop: element.pageYOffset\n    };\n  }\n\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\nfunction isScaled(element) {\n  const rect = getBoundingClientRect(element);\n  return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(element, isOffsetParentAnElement && isScaled(offsetParent));\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent, true);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // @ts-ignore\n    node.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    node.parentNode || ( // DOM Element detected\n    isShadowRoot(node) ? node.host : null) || // ShadowRoot detected\n    getDocumentElement(node) // fallback\n\n  );\n}\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n}\n\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n\n  while (isHTMLElement(currentNode) && !['html', 'body'].includes(getNodeName(currentNode))) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  const window = getWindow(element);\n  let offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nfunction getDimensions(element) {\n  return {\n    width: element.offsetWidth,\n    height: element.offsetHeight\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent, true);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } // This doesn't appear to be need to be negated.\n    // else if (documentElement) {\n    //   offsets.x = getWindowScrollBarX(documentElement);\n    // }\n\n  }\n\n  return { ...rect,\n    x: rect.x - scroll.scrollLeft + offsets.x,\n    y: rect.y - scroll.scrollTop + offsets.y\n  };\n}\n\nfunction getViewportRect(element) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n\n    if (Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) < 0.01) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n\n  if (getComputedStyle$1(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].includes(getNodeName(node))) {\n    // @ts-ignore assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n\nfunction getScrollParents(node, list) {\n  var _node$ownerDocument;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  const scrollParent = getScrollParent(node);\n  const isBody = scrollParent === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);\n  const win = getWindow(scrollParent);\n  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  const updatedList = list.concat(target);\n  return isBody ? updatedList : // @ts-ignore: isBody tells us target will be an HTMLElement here\n  updatedList.concat(getScrollParents(getParentNode(target)));\n}\n\nfunction contains(parent, child) {\n  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n    let next = child;\n\n    do {\n      // use `===` replace node.isSameNode()\n      if (next && parent === next) {\n        return true;\n      } // @ts-ignore: need a better way to handle this...\n\n\n      next = next.parentNode || next.host;\n    } while (next);\n  }\n\n  return false;\n}\n\nfunction getInnerBoundingClientRect(element) {\n  const clientRect = getBoundingClientRect(element);\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  return {\n    top,\n    left,\n    x: left,\n    y: top,\n    right: left + element.clientWidth,\n    bottom: top + element.clientHeight,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\n\nfunction getClientRectFromClippingParent(element, clippingParent) {\n  if (clippingParent === 'viewport') {\n    return rectToClientRect(getViewportRect(element));\n  }\n\n  if (isElement(clippingParent)) {\n    return getInnerBoundingClientRect(clippingParent);\n  }\n\n  return rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  const clippingParents = getScrollParents(getParentNode(element));\n  const canEscapeClipping = ['absolute', 'fixed'].includes(getComputedStyle$1(element).position);\n  const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // @ts-ignore isElement check ensures we return Array<Element>\n\n\n  return clippingParents.filter(clippingParent => isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body');\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingClientRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary\n  } = _ref;\n  const mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  const clippingParents = [...mainClippingParents, rootBoundary];\n  const firstClippingParent = clippingParents[0];\n  const clippingRect = clippingParents.reduce((accRect, clippingParent) => {\n    const rect = getClientRectFromClippingParent(element, clippingParent);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingParent(element, firstClippingParent));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n\nconst platform = {\n  getElementRects: _ref => {\n    let {\n      reference,\n      floating,\n      strategy\n    } = _ref;\n    return {\n      reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),\n      floating: { ...getDimensions(floating),\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  convertOffsetParentRelativeRectToViewportRelativeRect: args => convertOffsetParentRelativeRectToViewportRelativeRect(args),\n  getOffsetParent: _ref2 => {\n    let {\n      element\n    } = _ref2;\n    return getOffsetParent(element);\n  },\n  isElement: value => isElement(value),\n  getDocumentElement: _ref3 => {\n    let {\n      element\n    } = _ref3;\n    return getDocumentElement(element);\n  },\n  getClippingClientRect: args => getClippingClientRect(args),\n  getDimensions: _ref4 => {\n    let {\n      element\n    } = _ref4;\n    return getDimensions(element);\n  },\n  getClientRects: _ref5 => {\n    let {\n      element\n    } = _ref5;\n    return element.getClientRects();\n  }\n};\n\nconst computePosition = (reference, floating, options) => computePosition$1(reference, floating, {\n  platform,\n  ...options\n});\n\nexport { computePosition, getScrollParents };\n"],"sourceRoot":""}